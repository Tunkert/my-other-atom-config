(function() {
  var CompositeDisposable, ConfigSchema, isOpeningTagLikePattern,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  isOpeningTagLikePattern = /<(?![\!\/])([a-z]{1}[^>\s=\'\"\/]*)[^>\/]*>$/i;

  ConfigSchema = require('./configuration.coffee');

  CompositeDisposable = require('atom').CompositeDisposable;

  module.exports = {
    config: ConfigSchema.config,
    neverClose: [],
    forceInline: [],
    forceBlock: [],
    makeNeverCloseSelfClosing: false,
    makeUnrecognizedBlock: false,
    legacyMode: false,
    inlineByDefault: ['a', 'abbr', 'acronym', 'audio', 'b', 'bdi', 'bdo', 'big', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'i', 'iframe', 'ins', 'kbd', 'label', 'map', 'mark', 'meter', 'noscript', 'object', 'output', 'picture', 'progress', 'q', 'ruby', 's', 'samp', 'script', 'select', 'slot', 'small', 'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'tt', 'var', 'video'],
    activate: function() {
      this.autocloseHTMLEvents = new CompositeDisposable;
      this.closeAndCompleteCommand = atom.commands.add('atom-text-editor', {
        'autoclose-html-plus:close-and-complete': (function(_this) {
          return function(e) {
            if (_this.legacyMode) {
              console.log(e);
              return e.abortKeyBinding();
            } else {
              atom.workspace.getActiveTextEditor().insertText(">");
              return _this.execAutoclose();
            }
          };
        })(this)
      });
      atom.config.observe('autoclose-html-plus.neverClose', (function(_this) {
        return function(value) {
          return _this.neverClose = value;
        };
      })(this));
      atom.config.observe('autoclose-html-plus.forceInline', (function(_this) {
        return function(value) {
          return _this.forceInline = value;
        };
      })(this));
      atom.config.observe('autoclose-html-plus.forceBlock', (function(_this) {
        return function(value) {
          return _this.forceBlock = value;
        };
      })(this));
      atom.config.observe('autoclose-html-plus.makeNeverCloseSelfClosing', (function(_this) {
        return function(value) {
          return _this.makeNeverCloseSelfClosing = value;
        };
      })(this));
      atom.config.observe('autoclose-html-plus.makeUnrecognizedBlock', (function(_this) {
        return function(value) {
          return _this.makeUnrecognizedBlock = value;
        };
      })(this));
      return atom.config.observe('autoclose-html-plus.legacyMode', (function(_this) {
        return function(value) {
          _this.legacyMode = value;
          if (_this.legacyMode) {
            return _this._events();
          } else {
            return _this._unbindEvents();
          }
        };
      })(this));
    },
    deactivate: function() {
      if (this.legacyMode) {
        this._unbindEvents();
      }
      return this.closeAndCompleteCommand.dispose();
    },
    isInline: function(eleTag) {
      var ele, ref, ref1, ref2, ref3, ret;
      if (this.forceInline.indexOf("*") > -1) {
        return true;
      }
      try {
        ele = document.createElement(eleTag);
      } catch (error) {
        return false;
      }
      if (ref = eleTag.toLowerCase(), indexOf.call(this.forceBlock, ref) >= 0) {
        return false;
      } else if (ref1 = eleTag.toLowerCase(), indexOf.call(this.forceInline, ref1) >= 0) {
        return true;
      }
      if (this.makeUnrecognizedBlock) {
        return ref2 = eleTag.toLowerCase(), indexOf.call(this.inlineByDefault, ref2) >= 0;
      } else {
        document.body.appendChild(ele);
        ret = (ref3 = window.getComputedStyle(ele).getPropertyValue('display')) === 'inline' || ref3 === 'inline-block' || ref3 === 'none';
        document.body.removeChild(ele);
        return ret;
      }
    },
    isNeverClosed: function(eleTag) {
      var ref;
      return ref = eleTag.toLowerCase(), indexOf.call(this.neverClose, ref) >= 0;
    },
    execAutoclose: function() {
      var count, doubleQuotes, editor, eleTag, index, inlineCheckpoint, isInline, line, matches, oddDoubleQuotes, oddSingleQuotes, originalPartial, partial, range, singleQuotes, tag;
      editor = atom.workspace.getActiveTextEditor();
      range = editor.selections[0].getBufferRange();
      line = editor.buffer.getLines()[range.end.row];
      partial = line.substr(0, range.start.column);
      partial = partial.substr(partial.lastIndexOf('<'));
      if (partial === '>') {
        originalPartial = partial;
        partial = line.substr(0, range.start.column);
        count = 1;
        while (true) {
          if (count >= 10 || count > range.end.row) {
            partial = originalPartial;
            break;
          }
          line = editor.buffer.getLines()[range.end.row - count];
          partial = line.concat(partial);
          if (partial.lastIndexOf('<') >= 0) {
            partial = partial.substr(partial.lastIndexOf('<'));
            break;
          }
          count++;
        }
      }
      if (partial.substr(partial.length - 1, 1) === '/') {
        return;
      }
      singleQuotes = partial.match(/\'/g);
      doubleQuotes = partial.match(/\"/g);
      oddSingleQuotes = singleQuotes && (singleQuotes.length % 2);
      oddDoubleQuotes = doubleQuotes && (doubleQuotes.length % 2);
      if (oddSingleQuotes || oddDoubleQuotes) {
        return;
      }
      index = -1;
      while ((index = partial.indexOf('"')) !== -1) {
        partial = partial.slice(0, index) + partial.slice(partial.indexOf('"', index + 1) + 1);
      }
      while ((index = partial.indexOf("'")) !== -1) {
        partial = partial.slice(0, index) + partial.slice(partial.indexOf("'", index + 1) + 1);
      }
      if ((matches = partial.match(isOpeningTagLikePattern)) == null) {
        return;
      }
      eleTag = matches[matches.length - 1];
      if (this.isNeverClosed(eleTag)) {
        if (this.makeNeverCloseSelfClosing) {
          tag = '/>';
          if (partial.substr(partial.length - 1, 1 !== ' ')) {
            tag = ' ' + tag;
          }
          editor.backspace();
          editor.insertText(tag);
        }
        return;
      }
      isInline = this.isInline(eleTag);
      editor.insertText('</' + eleTag + '>');
      editor.setCursorBufferPosition(range.end);
      if (!isInline) {
        inlineCheckpoint = editor.createCheckpoint();
        editor.insertNewline();
        editor.insertNewline();
        editor.autoIndentBufferRow(range.end.row + 1);
        editor.setCursorBufferPosition([range.end.row + 1, atom.workspace.getActivePaneItem().getTabText().length * atom.workspace.getActivePaneItem().indentationForBufferRow(range.end.row + 1)]);
        return editor.groupChangesSinceCheckpoint(inlineCheckpoint);
      }
    },
    _events: function() {
      return atom.workspace.observeTextEditors((function(_this) {
        return function(textEditor) {
          return textEditor.observeGrammar(function(grammar) {
            if (textEditor.autocloseHTMLbufferEvent != null) {
              textEditor.autocloseHTMLbufferEvent.dispose();
            }
            if (atom.views.getView(textEditor).getAttribute('data-grammar').split(' ').indexOf('html') > -1) {
              textEditor.autocloseHTMLbufferEvent = textEditor.buffer.onDidChange(function(e) {
                if ((e != null ? e.newText : void 0) === '>' && textEditor === atom.workspace.getActiveTextEditor()) {
                  return setTimeout(function() {
                    return _this.execAutoclose();
                  });
                }
              });
              return _this.autocloseHTMLEvents.add(textEditor.autocloseHTMLbufferEvent);
            }
          });
        };
      })(this));
    },
    _unbindEvents: function() {
      return this.autocloseHTMLEvents.dispose();
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
